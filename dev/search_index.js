var documenterSearchIndex = {"docs":
[{"location":"system/#System","page":"System","title":"System","text":"","category":"section"},{"location":"system/","page":"System","title":"System","text":"The computational grid required is assumed to correspond to a domain Omega=cup_r=1^n_Omega Omega_r ","category":"page"},{"location":"system/","page":"System","title":"System","text":"Grids for VoronoiFVM are managed by the packages ExtendableGrids.jl and SimplexGridFactory.jl","category":"page"},{"location":"system/","page":"System","title":"System","text":"with boundary  partialOmega=Gamma=cup_b=1^n_Gamma Gamma_b.","category":"page"},{"location":"system/","page":"System","title":"System","text":"The subdomains Omega_r are called \"regions\" and the boundary subdomains Gamma_b are called \"boundary regions\".","category":"page"},{"location":"system/","page":"System","title":"System","text":"On this complex of domains \"lives\"  a number of species which are either attached to a number of regions or to a number of boundary regions.","category":"page"},{"location":"system/","page":"System","title":"System","text":"All these data, the matrix for the linear system and other things are hold together by a struct VoronoiFVM.System.  This type is not exported to avoid name clashes.","category":"page"},{"location":"system/#System-constructors","page":"System","title":"System constructors","text":"","category":"section"},{"location":"system/","page":"System","title":"System","text":"VoronoiFVM.System(grid::ExtendableGrid; kwargs...)\nVoronoiFVM.System(X::AbstractVector; kwargs...)\nVoronoiFVM.System(X::AbstractVector,Y::AbstractVector; kwargs...)\nVoronoiFVM.System(X::AbstractVector,Y::AbstractVector,Z::AbstractVector; kwargs...)\nupdate_grid!","category":"page"},{"location":"system/#VoronoiFVM.System-Tuple{ExtendableGrid}","page":"System","title":"VoronoiFVM.System","text":"System(grid; kwargs...)\n\nCreate structure of type VoronoiFVM.System{Tv,Ti, Tm, TSpecMat<:AbstractMatrix, TSolArray<:AbstractMatrix}  holding data for finite volume system solution. \n\nParameters: \n\ngrid::ExtendableGrid: 1, 2 or 3D computational grid\n\nKeyword arguments:\n\nspecies: vector of integer species indices. Added to all grid regions, avoiding the need to call enable_species! for this default case.             If it is kept empty, species have be added to the system after creation via  enable_species!.\nunknown_storage: string or symbol.     Information  on  species  distribution  is kept  in  sparse  or  dense   matrices matrices and, correspondingly, the  solution array is of type   SparseSolutionArray  or matrix,  respectively. In  the case  of sparse   unknown storage,  the system matrix  handles exactly those  degrees of   freedom which correspond to unknowns.  However, handling of the sparse   matrix  structures  for  the   bookkeeping  of  the  unknowns  creates   overhead.\n:dense :  solution vector is an  nspecies x nnodes  dense matrix\n:sparse :  solution vector is an nspecies x nnodes  sparse matrix\nmatrixindextype: Integer type. Index type for sparse matrices created in the system.\n\nPhysics keyword arguments:\n\nflux: Function.     Flux between neigboring control volumes: flux(f,u,edge) or flux(f,u,edge,data)   should return in f[i] the flux of species i along the edge joining circumcenters   of neigboring control volumes.  For species i,u[i,1] and u[i,2] contain the unknown values at the corresponding ends of the edge.\nstorage: Function.  Storage term (term under time derivative): storage(f,u,node) or storage(f,u,node,data)    It should return in f[i] the storage term for the i-th equation. u[i] contains the value of   the i-th unknown.\nreaction:  Function. Reaction term:  reaction(f,u,node) or reaction(f,u,node,data)    It should return in f[i] the reaction term for the i-th equation. u[i] contains the value of   the i-th unknown.\nsource:  Function. Source term: source(f,node) or source(f,node,data).   It should return the in f[i] the value of the source term for the i-th equation.\nbflux:  Function. Flux between neighboring control volumes on the boundary\nbreaction Function.  Boundary reaction term:  breaction(f,u,node) or breaction(f,u,node,data)    Similar to reaction, but restricted to the inner or outer boundaries.\nbcondition Function. Alias for breaction.\nbsource: Function. Boundary source term: bsource(f,node) or bsource(f,node,data).   It should return in f[i] the value of the source term for the i-th equation.\nbstorage: Function.  Boundary storage term: bstorage(f,u,node) or bstorage(f,u,node,data)    Similar to storage, but restricted to the inner or outer boundaries.\ngeneric_operator: Funtion.  Generic operator  generic_operator(f,u,sys).    This operator acts on the full solution u of a system. Sparsity   is detected automatically  unless generic_operator_sparsity is given.\ngeneric_operator_sparsity:  Function defining the sparsity structure of the generic operator.   This should return the sparsity pattern of the generic_operator.\ndata:  User data (parameters).   This allows to pass various parameters to the callback functions. If data is given, all callback functions   should accept a last data argument. Otherwise, no data are passed explicitely, and constitutive callbacks can   take parameters from the closure where the function is defined.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.System-Tuple{AbstractVector}","page":"System","title":"VoronoiFVM.System","text":"System(X; kwargs...)\n\nCreate an 1D grid from vector X and call  VoronoiFVM.System(grid::ExtendableGrid; kwargs...).\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.System-Tuple{AbstractVector, AbstractVector}","page":"System","title":"VoronoiFVM.System","text":"System(X,Y; kwargs...)\n\nCreate a 2D grid from vectors X,Y  and call  VoronoiFVM.System(grid::ExtendableGrid; kwargs...).\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.System-Tuple{AbstractVector, AbstractVector, AbstractVector}","page":"System","title":"VoronoiFVM.System","text":"System(X,Y, Z; kwargs...)\n\nCreate a 3D grid from vectors X,Y,Z  and call  VoronoiFVM.System(grid::ExtendableGrid; kwargs...).\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.update_grid!","page":"System","title":"VoronoiFVM.update_grid!","text":"update_grid!(system; grid=system.grid)\n\nUpdate grid (e.g. after rescaling of coordinates).\n\n\n\n\n\n","category":"function"},{"location":"system/#Adding-species-by-species-numbers","page":"System","title":"Adding species by species numbers","text":"","category":"section"},{"location":"system/","page":"System","title":"System","text":"enable_species!(system::VoronoiFVM.AbstractSystem,ispec::Integer, regions::AbstractVector)\nenable_species!(system::VoronoiFVM.AbstractSystem; kwargs...)\nenable_boundary_species!","category":"page"},{"location":"system/#VoronoiFVM.enable_species!-Tuple{VoronoiFVM.AbstractSystem, Integer, AbstractVector}","page":"System","title":"VoronoiFVM.enable_species!","text":"enable_species!(system,ispec,regions)\n\nAdd species ispec to a list of bulk regions. Species numbers for bulk and boundary species have to be distinct.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.enable_species!-Tuple{VoronoiFVM.AbstractSystem}","page":"System","title":"VoronoiFVM.enable_species!","text":"enable_species!(system; kwargs...)\n\nKeyword arguments:\n\nspecies: Integer or vector of integers. Species to be added to the system.\nregions: Vector of integers. Regions, where these species shall be added.If nothing, they are added to all species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.enable_boundary_species!","page":"System","title":"VoronoiFVM.enable_boundary_species!","text":"enable_boundary_species!(system,ispec,regions)\n\nAdd species ispec to a list of boundary regions. Species numbers for bulk and boundary species have to be distinct.\n\n\n\n\n\n","category":"function"},{"location":"system/#Handling-boundary-conditions","page":"System","title":"Handling boundary conditions","text":"","category":"section"},{"location":"system/","page":"System","title":"System","text":"Boundary conditions are handeled in the  bcondition callback passed to the system constructor. For being called in this callback, the following  functions are availabel","category":"page"},{"location":"system/","page":"System","title":"System","text":"boundary_dirichlet!(y,u,bnode,ispec,ireg,val)\nboundary_dirichlet!(y,u,bnode;kwargs...)\nboundary_neumann!(y,u,bnode,ispec,ireg,val)\nboundary_neumann!(y,u,bnode;kwargs...)\nboundary_robin!(y,u,bnode,ispec,ireg,fac,val)\nboundary_robin!(y,u,bnode;kwargs...)\nramp","category":"page"},{"location":"system/#VoronoiFVM.boundary_dirichlet!-NTuple{6, Any}","page":"System","title":"VoronoiFVM.boundary_dirichlet!","text":" boundary_dirichlet!(y,u,bnode,ispec,ireg,val)\n\nSet Dirichlet boundary condition for species ispec at boundary ibc.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_dirichlet!-Tuple{Any, Any, Any}","page":"System","title":"VoronoiFVM.boundary_dirichlet!","text":" boundary_dirichlet!(y,u,bnode, args...; kwargs...)\n\nKeyword argument version:\n\nspecies: species number. Default: 1\nregion: boundary region number. By default, all boundary regions.\nvalue: value\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_neumann!-NTuple{6, Any}","page":"System","title":"VoronoiFVM.boundary_neumann!","text":" boundary_neumann!(y,u,bnode,ispec,ireg,val)\n\nSet Neumann boundary condition for species ispec at boundary ibc.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_neumann!-Tuple{Any, Any, Any}","page":"System","title":"VoronoiFVM.boundary_neumann!","text":" boundary_neumann!(y,u,bnode, args...; kwargs...)\n\nKeyword argument version:\n\nspecies: species number. Default: 1\nregion: boundary region number. By default, all boundary regions.\nvalue: value\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_robin!-NTuple{7, Any}","page":"System","title":"VoronoiFVM.boundary_robin!","text":" boundary_robin!(y,u,bnode,ispec,ireg,fac,val)\n\nSet Robin boundary condition for species ispec at boundary ibc.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_robin!-Tuple{Any, Any, Any}","page":"System","title":"VoronoiFVM.boundary_robin!","text":" boundary_robin!(y,u,bnode, args...; kwargs...)\n\nKeyword argument version:\n\nspecies: species number. Default: 1\nregion: boundary region number. By default, all boundary regions.\nfactor: factor\nvalue: value\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.ramp","page":"System","title":"VoronoiFVM.ramp","text":"   ramp(t; kwargs...)\n\nRamp function for specifying time dependent boundary conditions\n\nKeyword arguments:\n\ndt: Tuple: start and end time of ramp. Default: (0,0.1)\ndu: Tuple: values at start and end time. Default: (0,0)\n\n\n\n\n\n","category":"function"},{"location":"system/#Various-tools","page":"System","title":"Various tools","text":"","category":"section"},{"location":"system/","page":"System","title":"System","text":"physics!","category":"page"},{"location":"system/#VoronoiFVM.physics!","page":"System","title":"VoronoiFVM.physics!","text":"physics!(system,physics)\n\nReplace System's physics data\n\n\n\n\n\nphysics!(system; kwargs...)\n\nReplace System's physics data.\n\n\n\n\n\n","category":"function"},{"location":"system/","page":"System","title":"System","text":"check_allocs!","category":"page"},{"location":"system/#VoronoiFVM.check_allocs!","page":"System","title":"VoronoiFVM.check_allocs!","text":"check_allocs!(system,true_or_false)\n\nEnable/disable checking for time-consuming allocations in the assembly loop.  By default,  this check  is switched off.  By setting  the environment variable ENV[\"VORONOIFVM_CHECK_ALLOCS\"]=\"true\", this  default can be changed.\n\nUnless  the   matrix  pattern  changes,  there   shouldn't  occur  any allocations in this loop. The check  method is aware of matrix pattern changes. As a consequence, allocations in the assembly loop are mostly due to type instabilities in physics callbacks, see the the discussion here.  Type instabilities can be debugged via the @time  macro applied to expressions in a physics callback.\n\nThe following  cases provide some ideas  where to look for  reasons of the problem and possible remedies:\n\nCase 1: a parameter changes its value, and Julia is not sure about the type.\n\neps=1.0\n\nflux(f,_u,edge)\n    u=unkowns(edge,_u)\n    f[1]=eps*(u[1,1]-[1,2])\nend\n... solve etc ...\neps=2.0\n\nRemedy: use a type annotation eps::Float64=... to signalize your intent to Julia. This behaviour is explained in the Julia documentation.\n\nCase 2: variables in the closure have the same name as a variable introduced in a callback.\n\nflux(f,_u,edge)\n    u=unkowns(edge,_u)\n    f[1]=(u[1,1]-[1,2])\nend\n\n... create etc ...\n\nu=solve(...)\n\nRemedy: rename e.g. u=solve() to sol=solve()\n\n\n\n\n\n","category":"function"},{"location":"system/","page":"System","title":"System","text":"num_dof\nunknowns(system::VoronoiFVM.AbstractSystem; kwargs...)\nVoronoiFVM.isunknownsof\nBase.reshape\nLinearAlgebra.norm(system::VoronoiFVM.AbstractSystem, u,p)","category":"page"},{"location":"system/#VoronoiFVM.num_dof","page":"System","title":"VoronoiFVM.num_dof","text":"num_dof(system)\n\n\nNumber of degrees of freedom for system.\n\n\n\n\n\n","category":"function"},{"location":"system/#VoronoiFVM.unknowns-Tuple{VoronoiFVM.AbstractSystem}","page":"System","title":"VoronoiFVM.unknowns","text":"unknowns(system; inival)\n\n\nCreate a solution vector for system. If inival is not specified, the entries of the returned vector are undefined.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.isunknownsof","page":"System","title":"VoronoiFVM.isunknownsof","text":"isunknownsof(u, sys)\n\n\nDetect if array fits to the system.\n\n\n\n\n\n","category":"function"},{"location":"system/#Base.reshape","page":"System","title":"Base.reshape","text":"reshape(v, system)\n\n\nReshape vector to fit as solution to system.\n\n\n\n\n\n","category":"function"},{"location":"system/#Types","page":"System","title":"Types","text":"","category":"section"},{"location":"system/","page":"System","title":"System","text":"VoronoiFVM.AbstractSystem\nVoronoiFVM.System{Tv,Ti, Tm, TSpecMat<:AbstractMatrix, TSolArray<:AbstractMatrix}\nVoronoiFVM.DenseSystem\nVoronoiFVM.SparseSystem","category":"page"},{"location":"system/#VoronoiFVM.AbstractSystem","page":"System","title":"VoronoiFVM.AbstractSystem","text":"abstract type AbstractSystem{Tv<:Number, Ti<:Integer, Tm<:Integer}\n\nAbstract type for finite volume system structure.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.System","page":"System","title":"VoronoiFVM.System","text":"mutable struct System{Tv, Ti, Tm, TSpecMat<:(AbstractMatrix), TSolArray<:(AbstractMatrix)} <: VoronoiFVM.AbstractSystem{Tv, Ti, Tm}\n\nStructure holding data for finite volume system.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.DenseSystem","page":"System","title":"VoronoiFVM.DenseSystem","text":"const DenseSystem\n\nType alias for system with dense matrix based species management\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.SparseSystem","page":"System","title":"VoronoiFVM.SparseSystem","text":"const SparseSystem\n\nType alias for system with sparse matrix based species management\n\n\n\n\n\n","category":"type"},{"location":"system/#Legacy-API","page":"System","title":"Legacy API","text":"","category":"section"},{"location":"system/","page":"System","title":"System","text":"boundary_dirichlet!(system::VoronoiFVM.AbstractSystem, ispec, ibc, v)\nboundary_dirichlet!(system::VoronoiFVM.AbstractSystem; kwargs...)\nboundary_neumann!(system::VoronoiFVM.AbstractSystem, ispec, ibc, v)\nboundary_neumann!(system::VoronoiFVM.AbstractSystem; kwargs...)\nboundary_robin!(system::VoronoiFVM.AbstractSystem, ispec, ibc,alpha, v)\nboundary_robin!(system::VoronoiFVM.AbstractSystem; kwargs...)","category":"page"},{"location":"system/#VoronoiFVM.boundary_dirichlet!-Tuple{VoronoiFVM.AbstractSystem, Any, Any, Any}","page":"System","title":"VoronoiFVM.boundary_dirichlet!","text":"boundary_dirichlet!(system, ispec, ibc, v)\n\n\nSet Dirichlet boundary condition for species ispec at boundary ibc:\n\nu_ispec=v on Gamma_ibc\n\ninfo: Info\nStarting with version 0.14, it is preferable to define boundary condtitions within the bcondition physics callback\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_dirichlet!-Tuple{VoronoiFVM.AbstractSystem}","page":"System","title":"VoronoiFVM.boundary_dirichlet!","text":"  boundary_dirichlet!(system; kwargs...)\n\nKeyword argument version:\n\nspecies: species number\nregion: region number\nvalue: value\n\ninfo: Info\nStarting with version 0.14, it is preferable to define boundary condtitions within the bcondition physics callback\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_neumann!-Tuple{VoronoiFVM.AbstractSystem, Any, Any, Any}","page":"System","title":"VoronoiFVM.boundary_neumann!","text":"boundary_neumann!(system, ispec, ibc, v)\n\n\nSet Neumann boundary condition for species ispec at boundary ibc:\n\nmathrmflux_ispeccdot vec n=v on Gamma_ibc\n\ninfo: Info\nStarting with version 0.14, it is preferable to define boundary condtitions within the bcondition physics callback\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_neumann!-Tuple{VoronoiFVM.AbstractSystem}","page":"System","title":"VoronoiFVM.boundary_neumann!","text":"  boundary_neumann!(system; kwargs...)\n\nKeyword argument version:\n\nspecies: species number\nregion: region number\nvalue: value\n\ninfo: Info\nStarting with version 0.14, it is preferable to define boundary condtitions within the bcondition physics callback\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_robin!-Tuple{VoronoiFVM.AbstractSystem, Any, Any, Any, Any}","page":"System","title":"VoronoiFVM.boundary_robin!","text":"boundary_robin!(system, ispec, ibc, α, v)\n\n\nSet Robin boundary condition for species ispec at boundary ibc:\n\nmathrmflux_ispeccdot vec n + alpha u_ispec=v on Gamma_ibc\n\ninfo: Info\nStarting with version 0.14, it is preferable to define boundary condtitions within the bcondition physics callback\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.boundary_robin!-Tuple{VoronoiFVM.AbstractSystem}","page":"System","title":"VoronoiFVM.boundary_robin!","text":"  boundary_robin!(system; kwargs...)\n\nKeyword argument version:\n\nspecies: species number\nregion: region number\nfactor: factor\nvalue: value\n\ninfo: Info\nStarting with version 0.14, it is preferable to define boundary condtitions within the bcondition physics callback\n\n\n\n\n\n","category":"method"},{"location":"notebooks/#About-the-notebooks","page":"About the notebooks","title":"About the notebooks","text":"","category":"section"},{"location":"notebooks/","page":"About the notebooks","title":"About the notebooks","text":"Pluto.jl notebooks provide a great opportunity to put together code, text and graphics  in a reproducible and accessible way. Therefore, the examples for this package are being  amended by a series of Pluto notebooks. Like the example code, the notebook code is tested regularly during CI.","category":"page"},{"location":"notebooks/","page":"About the notebooks","title":"About the notebooks","text":"The notebooks use an updated and simplified version of the VoronoiFVM API. ","category":"page"},{"location":"notebooks/","page":"About the notebooks","title":"About the notebooks","text":"Plese note, that in the html version, interactive elements like sliders are disabled. Navigation via the table of contents does work, though.","category":"page"},{"location":"solutions/#Solution-objects","page":"Solution objects","title":"Solution objects","text":"","category":"section"},{"location":"solutions/#Dense-solution-arrays","page":"Solution objects","title":"Dense solution arrays","text":"","category":"section"},{"location":"solutions/","page":"Solution objects","title":"Solution objects","text":"Modules = [VoronoiFVM]\nPages=[\"vfvm_densesolution.jl\"]","category":"page"},{"location":"solutions/#VoronoiFVM.DenseSolutionArray","page":"Solution objects","title":"VoronoiFVM.DenseSolutionArray","text":"const DenseSolutionArray=Matrix\n\nDense storage of solution\n\n\n\n\n\n","category":"type"},{"location":"solutions/#VoronoiFVM.dof-Union{Tuple{Tv}, Tuple{Matrix{Tv}, Integer, Integer}} where Tv","page":"Solution objects","title":"VoronoiFVM.dof","text":"dof(a, ispec, K)\n\n\nGet degree of freedom number\n\n\n\n\n\n","category":"method"},{"location":"solutions/#VoronoiFVM.values-Union{Tuple{Matrix{Tv}}, Tuple{Tv}} where Tv","page":"Solution objects","title":"VoronoiFVM.values","text":"Array of values in solution array.\n\n\n\n\n\n","category":"method"},{"location":"solutions/#Sparse-solution-arrays","page":"Solution objects","title":"Sparse solution arrays","text":"","category":"section"},{"location":"solutions/","page":"Solution objects","title":"Solution objects","text":"Modules = [VoronoiFVM]\nPages=[\"vfvm_sparsesolution.jl\"]","category":"page"},{"location":"solutions/#VoronoiFVM.SparseSolutionArray","page":"Solution objects","title":"VoronoiFVM.SparseSolutionArray","text":"struct SparseSolutionArray{Tv, Ti} <: AbstractArray{Tv, 2}\n\nStruct holding solution information for SparseSystem. Solution is stored in a sparse matrix structure.\n\nThis class plays well with the abstract array interface.\n\nFields:\n\nnode_dof::SparseArrays.SparseMatrixCSC{Tv, Ti} where {Tv, Ti}\nSparse matrix holding actual data.\n\n\n\n\n\n","category":"type"},{"location":"solutions/#Base.copy-Union{Tuple{VoronoiFVM.SparseSolutionArray{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}","page":"Solution objects","title":"Base.copy","text":"Create a copy of sparse solution array\n\n\n\n\n\n","category":"method"},{"location":"solutions/#Base.getindex-Tuple{VoronoiFVM.SparseSolutionArray, Integer, Integer}","page":"Solution objects","title":"Base.getindex","text":"getindex(a, ispec, inode)\n\n\nAccessor for sparse solution array.\n\n\n\n\n\n","category":"method"},{"location":"solutions/#Base.setindex!-Tuple{VoronoiFVM.SparseSolutionArray, Any, Integer, Integer}","page":"Solution objects","title":"Base.setindex!","text":"setindex!(a, v, ispec, inode)\n\n\nAccessor for sparse solution array.\n\n\n\n\n\n","category":"method"},{"location":"solutions/#Base.similar-Union{Tuple{VoronoiFVM.SparseSolutionArray{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}","page":"Solution objects","title":"Base.similar","text":"Create a similar unintialized sparse solution array\n\n\n\n\n\n","category":"method"},{"location":"solutions/#Base.size-Tuple{VoronoiFVM.SparseSolutionArray}","page":"Solution objects","title":"Base.size","text":"size(a)\n\n\nReturn size of sparse solution array.\n\n\n\n\n\n","category":"method"},{"location":"solutions/#VoronoiFVM.dof-Union{Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.SparseSolutionArray{Tv, Ti}, Integer, Integer}} where {Tv, Ti}","page":"Solution objects","title":"VoronoiFVM.dof","text":"dof(a, i, j)\n\n\nGet number of degree of freedom. Return 0 if species is not defined in node.\n\n\n\n\n\n","category":"method"},{"location":"solutions/#VoronoiFVM.getdof-Tuple{VoronoiFVM.SparseSolutionArray, Integer}","page":"Solution objects","title":"VoronoiFVM.getdof","text":"getdof(a, i)\n\n\nReturn  value for degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"solutions/#VoronoiFVM.setdof!-Tuple{VoronoiFVM.SparseSolutionArray, Any, Integer}","page":"Solution objects","title":"VoronoiFVM.setdof!","text":"setdof!(a, v, i)\n\n\nSet value for degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"solutions/#VoronoiFVM.values-Tuple{VoronoiFVM.SparseSolutionArray}","page":"Solution objects","title":"VoronoiFVM.values","text":"values(a)\n\n\nArray of values in sparse solution array.\n\n\n\n\n\n","category":"method"},{"location":"solutions/#Transient-solution","page":"Solution objects","title":"Transient solution","text":"","category":"section"},{"location":"solutions/","page":"Solution objects","title":"Solution objects","text":"Modules = [VoronoiFVM]\nPages=[\"vfvm_transientsolution.jl\"]","category":"page"},{"location":"solutions/#VoronoiFVM.AbstractTransientSolution","page":"Solution objects","title":"VoronoiFVM.AbstractTransientSolution","text":"abstract type AbstractTransientSolution{T, N, A, B} <: RecursiveArrayTools.AbstractDiffEqArray{T, N, A}\n\nAbstract type for transient solution\n\n\n\n\n\n","category":"type"},{"location":"solutions/#VoronoiFVM.TransientSolution","page":"Solution objects","title":"VoronoiFVM.TransientSolution","text":"mutable struct TransientSolution{T, N, A, B} <: VoronoiFVM.AbstractTransientSolution{T, N, A, B}\n\nTransient solution structure\n\nFields\n\nu::Any\nVector of solutions\n\nt::Any\nVector of times\n\nInterface\n\nObject of this type adhere to the AbstractDiffEqArray  interface. For indexing and interpolation, see https://diffeq.sciml.ai/stable/basics/solution/.\n\nIn particular, a TransientSolution sol can be accessed as follows:\n\nsol[i] contains the solution for timestep i\nsol[ispec,:,i] contains the solution for component ispec at timestep i\nsol(t) returns a (linearly) interpolated solution value for t.\nsol.t[i] is the corresponding time for timestep i\nsol[ispec,ix,i] refers to solution of component ispec at node ix at moment i\n\n\n\n\n\n","category":"type"},{"location":"solutions/#VoronoiFVM.TransientSolution-Union{Tuple{T}, Tuple{Number, AbstractArray{T}}} where T","page":"Solution objects","title":"VoronoiFVM.TransientSolution","text":"TransientSolution(t0,inival;\n                  in_memory=true,\n                  keep_open=true,\n                  fname=tempname(pwd())*\".jld2\"\n\nConstructor of transient solution with initial value and inital time.\n\nin_memory: if true (default), data are kept in main memory, otherwise on disk (via JLD2)\nkeep_open: if true, disk file is not closed during the existence of the object\nfname: file name for the disk file\n\n\n\n\n\n","category":"method"},{"location":"solutions/#VoronoiFVM.VectorOfDiskArrays-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T","page":"Solution objects","title":"VoronoiFVM.VectorOfDiskArrays","text":"VectorOfDiskArrays(firstobj:AbstractArray;\n                   keep_open=true,\n                   fname= fname=tempname(pwd())*\".jld2\")\n\nConstructor of vector of arrays stored on disk (via JLD2).\n\nkeep_open: if true, disk file is not closed during the existence of the object\nfname: file name for the disk file\n\nThe disk file is automatically removed if the object is garbage collected.\n\n\n\n\n\n","category":"method"},{"location":"allindex/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"allindex/#Types-and-Constructors","page":"Index","title":"Types and Constructors","text":"","category":"section"},{"location":"allindex/","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:type]","category":"page"},{"location":"allindex/#Constants","page":"Index","title":"Constants","text":"","category":"section"},{"location":"allindex/","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:constant]","category":"page"},{"location":"allindex/#Methods","page":"Index","title":"Methods","text":"","category":"section"},{"location":"allindex/","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:function]","category":"page"},{"location":"misc/#Miscellaneous","page":"Miscellaneous","title":"Miscellaneous","text":"","category":"section"},{"location":"misc/#Form-factor-calculatione","page":"Miscellaneous","title":"Form factor calculatione","text":"","category":"section"},{"location":"misc/","page":"Miscellaneous","title":"Miscellaneous","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_formfactors.jl\"]","category":"page"},{"location":"misc/#VoronoiFVM.edgevelocities-Tuple{Any, Any}","page":"Miscellaneous","title":"VoronoiFVM.edgevelocities","text":"edgevelocities(grid, velofunc)\n\n\nProject velocity onto grid edges,\n\n\n\n\n\n","category":"method"},{"location":"misc/#Additional-grid-methods","page":"Miscellaneous","title":"Additional grid methods","text":"","category":"section"},{"location":"misc/","page":"Miscellaneous","title":"Miscellaneous","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_xgrid.jl\"]","category":"page"},{"location":"misc/#VoronoiFVM.Grid","page":"Miscellaneous","title":"VoronoiFVM.Grid","text":"Grid=ExtendableGrids.simplexgrid\n\nRe-Export of ExtendableGrids.simplexgrid\n\n\n\n\n\n","category":"function"},{"location":"solver/#Solution-methods","page":"Solution methods","title":"Solution methods","text":"","category":"section"},{"location":"solver/#Solve-method","page":"Solution methods","title":"Solve method","text":"","category":"section"},{"location":"solver/","page":"Solution methods","title":"Solution methods","text":"solve(system::VoronoiFVM.AbstractSystem; kwargs...)\nsolve(inival, system::VoronoiFVM.AbstractSystem, times; kwargs...)\nsolve(inival, system::VoronoiFVM.AbstractSystem; kwargs...)\nsolve!(solution,inival, system::VoronoiFVM.AbstractSystem; kwargs...)","category":"page"},{"location":"solver/#VoronoiFVM.solve-Tuple{VoronoiFVM.AbstractSystem}","page":"Solution methods","title":"VoronoiFVM.solve","text":"solve(system; kwargs...)\n\nMain solution method for VoronoiFVM.System.\n\nKeyword arguments:\n\nGeneral for all solvers \ninival (default: 0) : Array created via unknowns or  number giving the initial value.\nAll elements of SolverControl can be used as kwargs except in the case of the DifferentialEquations based solver\ndamp (default: 1): alias for damp_initial\ndamp_grow (default: 1): alias for damp_growth\nabstol: alias for tol_absolute\nreltol: alias for tol_relative\ncontrol (default: nothing): Pass instance of SolverControl\nStationary solver: Invoked if neither times nor embed  nor tspan nor tstep are given as keyword argument.\ntime (default: 0): Set time value. \nReturns a DenseSolutionArray or SparseSolutionArray\nImplicit Euler timestep solver. Invoked if tstep kwarg is given.\ntime (default: 0): Set time value. \ntstep: time step\nReturns a DenseSolutionArray or SparseSolutionArray\n\nEmbedding (homotopy) solver: Invoked if embed kwarg is given. Use homotopy embedding + damped Newton's method  to  solve stationary problem or to solve series of parameter dependent problems. Parameter step control is performed according to solver control data.  kwargs and default values are:\nembed (default: nothing ): vector of parameter values to be reached exactly\nIn addition,  all kwargs of the implicit Euler solver (besides times) are handled.   Returns a transient solution object sol containing the stored solution, see TransientSolution.\nImplicit Euler transient solver: Invoked if times kwarg is given. Use implicit Euler method  + damped   Newton's method  to  solve time dependent problem. Time step control is performed according to solver control data.  kwargs and default values are:\ntimes (default: nothing ): vector of time values to be reached exactly\npre (default: (sol,t)->nothing ):  invoked before each time step\npost  (default:  (sol,oldsol, t, Δt)->nothing ):  invoked after each time step\nsample (default:  (sol,t)->nothing ): invoked after timestep for all times in times[2:end].\ndelta (default:  (u,v,t, Δt)->norm(sys,u-v,Inf) ):  Value  used to control the time step size Δu\nIf control.handle_error is true, if step solution  throws an error, stepsize  is lowered, and  step solution is called again with a smaller time value. If control.Δt<control.Δt_min, solution is aborted with error. Returns a transient solution object sol containing the stored solution, see TransientSolution.\nTransient solver via  DifferentialEquations.jl/OrdinaryDiffEq.jl: invoked if tspan and diffeq kwargs are given.\ntspan: Time interval for differential equations.\ndiffeq: DifferentialEquations or OrdinaryDiffEq module made available via import or using.\nsolver: specify solver from DifferentialEquations.    By default, Rosenbrock23() is used.   Any  stiff  solver   capable  to  work  with   mass  matrices  is possible.   If the system contains  elliptic equations, it needs to be a DAE solver able to  work with mass matrices.  Currently, the mass matrix must  be constant and diagonal which  means that only storage terms  of the  form s(u)=  c u  are allowed.  \nAll other kwargs   are  passed   to  DifferentialEquations.solve(),  see here for  an  overview.  \nReturns  a transient  solution  object  sol containing stored solutions, see TransientSolution.\n\n\n\n\n\n","category":"method"},{"location":"solver/#VoronoiFVM.solve-Tuple{Any, VoronoiFVM.AbstractSystem, Any}","page":"Solution methods","title":"VoronoiFVM.solve","text":"    solve(inival, system, times; kwargs...)\n\nAlias for solve(system::VoronoiFVM.AbstractSystem; kwargs...) with the corresponding keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"solver/#VoronoiFVM.solve-Tuple{Any, VoronoiFVM.AbstractSystem}","page":"Solution methods","title":"VoronoiFVM.solve","text":"solve(inival, system; control=NewtonControl(), tstep=Inf)\n\nAlias for solve(system::VoronoiFVM.AbstractSystem; kwargs...) with the corresponding keyword arguments.\n\nSolve stationary problem(if tstep==Inf) or one step implicit Euler step using Newton's method with inival as initial value. Returns a solution array.\n\n\n\n\n\n","category":"method"},{"location":"solver/#VoronoiFVM.solve!-Tuple{Any, Any, VoronoiFVM.AbstractSystem}","page":"Solution methods","title":"VoronoiFVM.solve!","text":"solve!(solution, inival, system; \n    control=NewtonControl(), \n    tstep=Inf)\n\nMutating version of solve(inival,system)\n\n\n\n\n\n","category":"method"},{"location":"solver/#Solver-history","page":"Solution methods","title":"Solver history","text":"","category":"section"},{"location":"solver/","page":"Solution methods","title":"Solution methods","text":"If log is set to true in solve, the history of newton iterations and  time/embedding steps is recorded and. For the respective previous solution step it can be obtained via history(system).","category":"page"},{"location":"solver/","page":"Solution methods","title":"Solution methods","text":"NewtonSolverHistory\nTransientSolverHistory\nBase.summary\ndetails\nhistory\nhistory_details\nhistory_summary","category":"page"},{"location":"solver/#VoronoiFVM.NewtonSolverHistory","page":"Solution methods","title":"VoronoiFVM.NewtonSolverHistory","text":"mutable struct NewtonSolverHistory <: AbstractVector{Float64}\n\nHistory information for one Newton solve of a nonlinear system. As an abstract vector it provides the history of the update norms. See summary and details for other ways to extract information.\n\nnlu::Int64\nnumber of Jacobi matrix factorizations  Default: 0\nnlin::Int64\nnumber of linear interation steps / factorization solves Default: 0\ntime::Float64\nElapsed time for solution  Default: 0.0\nupdatenorm::Any\nHistory of norms of u_i+1-u_i Default: zeros(0)\nl1normdiff::Any\nHistory of norms of u_i+1_1 - u_i_1 u_i_1  Default: zeros(0)\n\n\n\n\n\n","category":"type"},{"location":"solver/#VoronoiFVM.TransientSolverHistory","page":"Solution methods","title":"VoronoiFVM.TransientSolverHistory","text":"mutable struct TransientSolverHistory <: AbstractVector{NewtonSolverHistory}\n\nHistory information for transient solution/parameter embedding\n\nAs an abstract vector it provides the histories of each implicit Euler/embedding step. See summary and details for other ways to extract information.\n\nhistories::Any\nHistories of each implicit Euler Newton iteration  Default: Vector{NewtonSolverHistory}(undef, 0)\ntimes::Any\nTime values  Default: zeros(0)\nupdates::Any\nUpdate norms used for step control Default: zeros(0)\n\n\n\n\n\n","category":"type"},{"location":"solver/#Base.summary","page":"Solution methods","title":"Base.summary","text":"summary(h::NewtonSolverHistory)\n\nReturn named tuple summarizing history.\n\n\n\n\n\nsummary(h::TransientSolverHistory)\n\nReturn named tuple summarizing history.\n\n\n\n\n\n","category":"function"},{"location":"solver/#VoronoiFVM.details","page":"Solution methods","title":"VoronoiFVM.details","text":"details(h::NewtonSolverHistory)\n\nReturn array of named tuples  with info on each iteration step\n\n\n\n\n\ndetails(h::TransientSolverHistory)\n\nReturn array of details of each solver step\n\n\n\n\n\n","category":"function"},{"location":"solver/#VoronoiFVM.history","page":"Solution methods","title":"VoronoiFVM.history","text":"history(sys)\n\nReturn solver history from last solve call, if log was set to true. See  see SolverHistory, SolverHistories.\n\n\n\n\n\n","category":"function"},{"location":"solver/#VoronoiFVM.history_details","page":"Solution methods","title":"VoronoiFVM.history_details","text":"history_details(sys)\n\nReturn details of solver history from last solve call, if log was set to true. See details.\n\n\n\n\n\n","category":"function"},{"location":"solver/#VoronoiFVM.history_summary","page":"Solution methods","title":"VoronoiFVM.history_summary","text":"history_summary(sys)\n\nReturn summary of solver history from last solve call, if log was set to true. See summmary.\n\n\n\n\n\n","category":"function"},{"location":"solver/#Solver-control","page":"Solution methods","title":"Solver control","text":"","category":"section"},{"location":"solver/","page":"Solution methods","title":"Solution methods","text":"SolverControl\nNewtonControl","category":"page"},{"location":"solver/#VoronoiFVM.SolverControl","page":"Solution methods","title":"VoronoiFVM.SolverControl","text":"mutable struct SolverControl\n\nSolver control parameters for time stepping, embedding, Newton method control. All field names can be used as keyword arguments for solve(system::VoronoiFVM.AbstractSystem; kwargs...)\n\nNewton's method solves F(u)=0 by the iterative procedure u_i+1=u_i - d_i F(u_i)^-1F(u_i) starting with some inital value u_0, where d_i is a damping parameter.\n\ntol_absolute::Float64\nTolerance (in terms of norm of Newton update): terminate if Delta u_i=u_i+1-u_i_infty  tol_absolute.  Default: 1.0e-10\ntol_relative::Float64\nTolerance (relative to the size of the first update): terminate if Delta u_iDelta u_1 tol_relative.  Default: 1.0e-10\ntol_round::Float64\nTolerance for roundoff error detection: terminate if   u_i+1_1 - u_i_1 u_i_1 tol_round occured max_round times in a row.  Default: 1.0e-10\ntol_mono::Float64\nTolerance for monotonicity test: terminate with error if Delta u_iDelta u_i-1 1/tol_mono.  Default: 0.001\ndamp_initial::Float64\nInitial damping parameter d_0. To handle convergence problems, set this to a value less than 1.  Default: 1.0\ndamp_growth::Float64\nDamping parameter growth factor: d_i+1=min(d_icdot max_growth 1). It should be larger than 1.  Default: 1.2\nmax_iterations::Int32\nMaximum number of iterations.  Default: 100\nmax_lureuse::Int32\nMaximum number of reuses of lu factorization. It this value is 0, linear systems are solved by a sparse direct solver, and it's LU factorization is called in every Newton step. Otherwise, a BICGstab iterative method is used for linear system solution with a LU factorization as preconditioner which is updated only every max_lureuse Newton step.  Default: 0\nmax_round::Int32\nMaximum number of consecutive iterations within roundoff error tolerance The default effectively disables this criterion.  Default: 1000\ntol_linear::Float64\nTolerance of iterative linear solver.  Default: 0.0001\nfactorization::ExtendableSparse.AbstractFactorization\nFactorization kind for linear sytems (see ExtendableSparse.jl). Default: Standard Julia LU Factorization (UMFPACK).  Default: LUFactorization()\nverbose::Bool\nVerbosity flag.  Default: false\nhandle_exceptions::Bool\nHandle exceptions during transient solver and parameter embedding. If true, exceptions in Newton solves are catched, the embedding resp. time step is lowered, and solution is retried.  Default: false\nΔp::Float64\nInitial parameter step for embedding.  Default: 1.0\nΔp_max::Float64\nMaximal parameter step size.  Default: 1.0\nΔp_min::Float64\nMinimal parameter step size.  Default: 0.001\nΔp_grow::Float64\nMaximal parameter step size growth.  Default: 1.0\nΔt::Float64\nInitial time step  size.  Default: 0.1\nΔt_max::Float64\nMaximal time step size.  Default: 1.0\nΔt_min::Float64\nMinimal time step size.  Default: 0.001\nΔt_grow::Float64\nMaximal time step size growth.  Default: 1.2\nΔu_opt::Float64\nOptimal size of update for time stepping and embeding. The algorithm tries to keep the difference in norm between \"old\" and \"new\" solutions  approximately at this value.  Default: 0.1\nforce_first_step::Bool\nForce first timestep.  Default: false\nedge_cutoff::Float64\nEdge parameter cutoff for rectangular triangles.  Default: 0.0\numfpack_pivot_tolerance::Float64\nPivot tolerance for umfpack.  Default: defaultumfpackpivot_tolerance\nstore_all::Bool\nStore all steps of transient/embedding problem:  Default: true\nin_memory::Bool\nStore transient/embedding solution in memory  Default: true\nlog::Any\nRecord history  Default: false\n\n\n\n\n\n","category":"type"},{"location":"solver/#VoronoiFVM.NewtonControl","page":"Solution methods","title":"VoronoiFVM.NewtonControl","text":"NewtonControl\n\nLegacy name of SolverControl\n\n\n\n\n\n","category":"type"},{"location":"solver/#diffeq","page":"Solution methods","title":"Interface to DifferentialEquations.jl","text":"","category":"section"},{"location":"solver/","page":"Solution methods","title":"Solution methods","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_diffeq_interface.jl\"]","category":"page"},{"location":"solver/#VoronoiFVM.eval_jacobian!-NTuple{4, Any}","page":"Solution methods","title":"VoronoiFVM.eval_jacobian!","text":"eval_jacobian!(J, u, sys, t)\n\n\nInterpret the  discrete problem as an ODE/DAE problem. Provide the  jacobi matrix calculation function for DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"solver/#VoronoiFVM.eval_rhs!-NTuple{4, Any}","page":"Solution methods","title":"VoronoiFVM.eval_rhs!","text":"eval_rhs!(du, u, sys, t)\n\n\nInterpret the  discrete problem as an ODE/DAE problem. Provide the  rhs function for DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"solver/#VoronoiFVM.jac_prototype-Tuple{VoronoiFVM.AbstractSystem}","page":"Solution methods","title":"VoronoiFVM.jac_prototype","text":"jac_prototype(sys)\n\n\nComplete the system and provide the jacobi matrix as prototype for the jacobian for use with DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"solver/#VoronoiFVM.mass_matrix-Union{Tuple{VoronoiFVM.AbstractSystem{Tv, Ti}}, Tuple{Ti}, Tuple{Tv}} where {Tv, Ti}","page":"Solution methods","title":"VoronoiFVM.mass_matrix","text":"Calculate the mass matrix for use with DifferentialEquations.jl.\n\n\n\n\n\n","category":"method"},{"location":"solver/#VoronoiFVM.solve-Tuple{Module, AbstractArray, VoronoiFVM.AbstractSystem, Any}","page":"Solution methods","title":"VoronoiFVM.solve","text":"solve(DifferentialEquations, inival, system, tspan;  solver=nothing,   kwargs...)\n\nSolve using timestepping scheme  from DifferentialEquations.jl.\n\nAlias for solve(system::VoronoiFVM.AbstractSystem) with the corresponding keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Quantities","page":"Quantities","title":"Quantities","text":"","category":"section"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"The concept of quantities is implemented on top of the concept of species numbers. They have been introduces in order to be able to handle discontinuities at interfaces.","category":"page"},{"location":"quantities/","page":"Quantities","title":"Quantities","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_quantities.jl\"]\nOrder = [:type, :constant, :function]","category":"page"},{"location":"quantities/#VoronoiFVM.AbstractQuantity","page":"Quantities","title":"VoronoiFVM.AbstractQuantity","text":"abstract type AbstractQuantity{Ti<:Integer}\n\nAbstract supertype of quantities\n\n\n\n\n\n","category":"type"},{"location":"quantities/#VoronoiFVM.ContinuousQuantity","page":"Quantities","title":"VoronoiFVM.ContinuousQuantity","text":"struct ContinuousQuantity{Ti} <: VoronoiFVM.AbstractQuantity{Ti}\n\nA continuous quantity is represented by exactly one species number\n\nispec::Any\nSpecies number representing the quantity\n\nid::Any\nQuantity identifier allowing to use the quantity as index in parameter fields\n\n\n\n\n\n","category":"type"},{"location":"quantities/#VoronoiFVM.ContinuousQuantity-Union{Tuple{Tm}, Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm}, Any}} where {Tv, Ti, Tm}","page":"Quantities","title":"VoronoiFVM.ContinuousQuantity","text":" ContinuousQuantity(system,regions; ispec=0, id=0)\n\nAdd continuous quantity to the regions listed in regions.\n\nUnless specified in ispec, the species number is generated automtically.\n\nUnless specified by id, the quantity ID is generated automatically.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#VoronoiFVM.DiscontinuousQuantity","page":"Quantities","title":"VoronoiFVM.DiscontinuousQuantity","text":"struct DiscontinuousQuantity{Ti} <: VoronoiFVM.AbstractQuantity{Ti}\n\nA discontinuous quantity is represented by different species in neigboring regions.\n\nregionspec::Vector\nSpecies numbers representing the quantity in each region\n\nid::Any\nQuantity identifier allowing to use the quantity as index in parameter fields\n\n\n\n\n\n","category":"type"},{"location":"quantities/#VoronoiFVM.DiscontinuousQuantity-Union{Tuple{Tm}, Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm}, Any}} where {Tv, Ti, Tm}","page":"Quantities","title":"VoronoiFVM.DiscontinuousQuantity","text":" DiscontinuousQuantity(system,regions; regionspec=nothing, id=0)\n\nAdd discontinuous quantity to the regions listed in regions.\n\nUnless specified in regionspec, the species numbers for each region are generated automatically.\n\nUnless specified by id, the quantity ID is generated automatically.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#VoronoiFVM.InterfaceQuantity","page":"Quantities","title":"VoronoiFVM.InterfaceQuantity","text":"struct InterfaceQuantity{Ti} <: VoronoiFVM.AbstractQuantity{Ti}\n\nAn interface quantity is represented by exactly one species number\n\nispec::Any\nSpecies number representing the quantity\n\nid::Any\nQuantity identifier allowing to use the quantity as index in parameter fields\n\n\n\n\n\n","category":"type"},{"location":"quantities/#VoronoiFVM.InterfaceQuantity-Union{Tuple{Tm}, Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti, Tm}, Any}} where {Tv, Ti, Tm}","page":"Quantities","title":"VoronoiFVM.InterfaceQuantity","text":" InterfaceQuantity(system,regions; ispec=0, id=0)\n\nAdd interface quantity to the boundary regions listed in regions.\n\nUnless specified in ispec, the species number is generated automtically.\n\nUnless specified by id, the quantity ID is generated automatically.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.getindex-Tuple{AbstractArray, VoronoiFVM.AbstractQuantity}","page":"Quantities","title":"Base.getindex","text":"A[q]\n\nAccess columns  of Array A using id of quantity q\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.getindex-Tuple{AbstractMatrix, VoronoiFVM.AbstractQuantity, Any}","page":"Quantities","title":"Base.getindex","text":"M[q,i]\n\nAccess columns  M using id of quantity q\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.getindex-Tuple{ContinuousQuantity, VoronoiFVM.AbstractNode}","page":"Quantities","title":"Base.getindex","text":"node[quantity]\nedge[quantity]\n\nReturn species number on AbstractNode or AbstractEdge\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.getindex-Tuple{DiscontinuousQuantity, VoronoiFVM.BNode, Any}","page":"Quantities","title":"Base.getindex","text":"bnode[quantity,ireg]\n\nReturn species number of discontinuous quantity region ireg  adjacent to  BoundaryNode.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.getindex-Tuple{DiscontinuousQuantity, VoronoiFVM.BNode}","page":"Quantities","title":"Base.getindex","text":"bnode[quantity]\n\nReturn species number of discontinuous quantity region ireg  adjacent to  BoundaryNode for outer boundary nodes.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.getindex-Tuple{VoronoiFVM.AbstractEdgeData, VoronoiFVM.AbstractQuantity, Any}","page":"Quantities","title":"Base.getindex","text":"u[q,j]\n\nReturn value of quantity in unknowns on edge in flux callbacks.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.getindex-Tuple{VoronoiFVM.AbstractNodeData, VoronoiFVM.AbstractQuantity}","page":"Quantities","title":"Base.getindex","text":"u[q]\n\nReturn value of quantity in unknowns on node in  node callbacks.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.getindex-Tuple{VoronoiFVM.BNodeUnknowns, DiscontinuousQuantity, Any}","page":"Quantities","title":"Base.getindex","text":"u[q,ireg]\n\nReturn value of discontinuous quantity in unknowns adjacent to unknowns on boundary node.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.setindex!-Tuple{AbstractMatrix, Any, VoronoiFVM.AbstractQuantity, Any}","page":"Quantities","title":"Base.setindex!","text":"M[q,i]\n\nSet element of M using id of quantity q\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.setindex!-Tuple{AbstractMatrix, Any, VoronoiFVM.AbstractQuantity}","page":"Quantities","title":"Base.setindex!","text":"A[q]\n\nSet element of A using id of quantity q\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.setindex!-Tuple{VoronoiFVM.AbstractNodeData, Any, VoronoiFVM.AbstractQuantity}","page":"Quantities","title":"Base.setindex!","text":"f[q]=value\n\nSet rhs value for quantity in callbacks\n\n\n\n\n\n","category":"method"},{"location":"quantities/#Base.setindex!-Tuple{VoronoiFVM.BNodeRHS, Any, DiscontinuousQuantity, Any}","page":"Quantities","title":"Base.setindex!","text":"f[q,ireg]=v\n\nSet rhs value for discontinuous quantity in adjacent regions of  boundary node.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#VoronoiFVM.boundary_dirichlet!-Tuple{VoronoiFVM.AbstractSystem, DiscontinuousQuantity, Any, Any}","page":"Quantities","title":"VoronoiFVM.boundary_dirichlet!","text":"boundary_dirichlet(system, quantity, ibc, value)\n\nSet Dirichlet boundary value for quantity at boundary ibc.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#VoronoiFVM.num_quantities-Tuple{VoronoiFVM.AbstractSystem}","page":"Quantities","title":"VoronoiFVM.num_quantities","text":"num_quantities(system)\n\n\nNumber of quantities defined for system\n\n\n\n\n\n","category":"method"},{"location":"quantities/#VoronoiFVM.subgrids-Tuple{DiscontinuousQuantity, Any}","page":"Quantities","title":"VoronoiFVM.subgrids","text":"subgrids(quantity, system)\n\nReturn a vector of subgrids containing a subgrid for each  region where discontinuous quantitiy is defined.\n\n\n\n\n\n","category":"method"},{"location":"quantities/#VoronoiFVM.views-Tuple{Any, DiscontinuousQuantity, Any, Any}","page":"Quantities","title":"VoronoiFVM.views","text":"views(quantity, subgrids,system)\n\nReturn a vector of subgrids containing a subgrid for each  region where discontinuous quantitiy is defined.\n\n\n\n\n\n","category":"method"},{"location":"physics/#Physics-and-special-functions","page":"Physics & special functions","title":"Physics & special functions","text":"","category":"section"},{"location":"physics/#Physics","page":"Physics & special functions","title":"Physics","text":"","category":"section"},{"location":"physics/","page":"Physics & special functions","title":"Physics & special functions","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\"]","category":"page"},{"location":"physics/#VoronoiFVM.AbstractData","page":"Physics & special functions","title":"VoronoiFVM.AbstractData","text":"abstract type AbstractData\n\nAbstract type for user data.\n\ncompat: Compat\nWill be removed in future versions\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.AbstractPhysics","page":"Physics & special functions","title":"VoronoiFVM.AbstractPhysics","text":"abstract type AbstractPhysics\n\nAbstract type for physics.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Physics","page":"Physics & special functions","title":"VoronoiFVM.Physics","text":"struct Physics\n\nPhysics data record with the following fields:\n\nflux::Function\nFlux between neigboring control volumes: flux(f,_u,edge) or flux(f,_u,edge,data) should return in f[i] the flux of species i along the edge joining circumcenters of neigboring control volumes. u=unknowns(_u) returns a 2D array such that for species i, u[i,1] and u[i,2] contain the unknown values at the corresponding ends of the edge.\n\nstorage::Function\nStorage term (term under time derivative): storage(f,u,node) or storage(f,u,node,data)\nIt should return in f[i] the storage term for the i-th equation. u[i] contains the value of the i-th unknown.\n\nreaction::Function\nReaction term:  reaction(f,u,node) or reaction(f,u,node,data)\nIt should return in f[i] the reaction term for the i-th equation. u[i] contains the value of the i-th unknown.\n\nsource::Function\nSource term: source(f,node) or source(f,node,data).\nIt should return the in f[i] the value of the source term for the i-th equation.\n\nbflux::Function\nFlux between neighboring control volumes on the boundary\n\nbreaction::Function\nBoundary reaction term:  breaction(f,u,node) or breaction(f,u,node,data) Similar to reaction, but restricted to the inner or outer boundaries.\n\nbsource::Function\nBoundary source term: bsource(f,node) or bsource(f,node,data).\nIt should return in f[i] the value of the source term for the i-th equation.\n\nbstorage::Function\nBoundary storage term: bstorage(f,u,node) or bstorage(f,u,node,data) Similar to storage, but restricted to the inner or outer boundaries.\n\ngeneric_operator::Function\nGeneric operator  generic_operator(f,u,sys). This operator acts on the full solution u of a system. Sparsity is detected automatically  unless generic_operator_sparsity is given.\n\ngeneric_operator_sparsity::Function\nFunction defining the sparsity structure of the generic operator. This should return the sparsity pattern of the generic_operator.\n\ndata::Any\nUser data (parameters). This allows to pass various parameters to the callback functions.\n\nnum_species::Int8\nNumber of species including boundary species.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Physics-Tuple{}","page":"Physics & special functions","title":"VoronoiFVM.Physics","text":"Physics(;num_species=0,\n         data=nothing,\n         flux,\n         reaction,\n         storage,\n         source,\n         breaction,\n         bstorage,\n         generic,\n         generic_sparsity\n    )\n\nConstructor for physics data. For the meaning of the optional keyword arguments, see VoronoiFVM.System(grid::ExtendableGrid; kwargs...).\n\n\n\n\n\n","category":"method"},{"location":"physics/#Base.show-Tuple{IO, VoronoiFVM.AbstractPhysics}","page":"Physics & special functions","title":"Base.show","text":"show(io, physics)\n\n\nShow physics object\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.hasdata-Tuple{VoronoiFVM.Physics}","page":"Physics & special functions","title":"VoronoiFVM.hasdata","text":"hasdata(physics)\n\n\nCheck if physics object has data\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.@create_physics_wrappers-NTuple{5, Any}","page":"Physics & special functions","title":"VoronoiFVM.@create_physics_wrappers","text":"@create_physics_wrappers(physics,node,bnode,edge,bedge)\n\nCreate wrapper functions around physics callbacks which fit the API of ForwardDiff.jacobian! and pass the data parameter if necessary. These are meant to  be defined before performing assembly loops. The macro creates the follwing variables:\n\nwrapper functions: fluxwrap,storagewrap,reactionwrap,bstoragewrap, breactionwrap\nflag variables: issource, isreaction,isbreaction,isbstorage\n\n\n\n\n\n","category":"macro"},{"location":"physics/#Edge-and-node-data","page":"Physics & special functions","title":"Edge and node data","text":"","category":"section"},{"location":"physics/","page":"Physics & special functions","title":"Physics & special functions","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_geometryitems.jl\"]\n]","category":"page"},{"location":"physics/#VoronoiFVM.AbstractEdge","page":"Physics & special functions","title":"VoronoiFVM.AbstractEdge","text":"abstract type AbstractEdge{Tv<:Number, Ti<:Integer} <: VoronoiFVM.AbstractGeometryItem{Tv<:Number, Ti<:Integer}\n\nAbstract type for edges \n\nedge[idim,inode] gives coordinate of node.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.AbstractEdgeData","page":"Physics & special functions","title":"VoronoiFVM.AbstractEdgeData","text":"abstract type AbstractEdgeData{T<:Number} <: AbstractArray{T<:Number, 2}\n\nAbstract type for data on edges. u[ispec,inode] accesses value of species at corresponding node.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.AbstractGeometryItem","page":"Physics & special functions","title":"VoronoiFVM.AbstractGeometryItem","text":"abstract type AbstractGeometryItem{Tv<:Number, Ti<:Integer}\n\nAbstract type for geometry items (node,bnode,edge, bedge)\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.AbstractNode","page":"Physics & special functions","title":"VoronoiFVM.AbstractNode","text":"abstract type AbstractNode{Tv<:Number, Ti<:Integer} <: VoronoiFVM.AbstractGeometryItem{Tv<:Number, Ti<:Integer}\n\nAbstract type for nodes. \n\nnode[idim] gives the the corresponding coordinate.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.AbstractNodeData","page":"Physics & special functions","title":"VoronoiFVM.AbstractNodeData","text":"abstract type AbstractNodeData{T<:Number} <: AbstractArray{T<:Number, 1}\n\nAbstract type for data on nodes. u[ispec] accesses value of species at this node.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.BEdge","page":"Physics & special functions","title":"VoronoiFVM.BEdge","text":"mutable struct BEdge{Tv, Ti} <: VoronoiFVM.AbstractEdge{Tv, Ti}\n\nStructure holding local edge information.\n\nindex::Any\nIndex in grid\n\nnode::Vector\nIndex\n\nregion::Any\nInner region number corresponding to edge\n\nnspec::Any\nNumber of species defined in edge\n\nicell::Any\nNumber of discretization cell the edge is invoked from\n\ncoord::Matrix\nGrid coordinates\n\nbedgenodes::Matrix\nbfaceedges::Matrix\nbfaceregions::Vector\ntime::Any\nSystem time\n\nembedparam::Any\nCurrent value of embedding parameter\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.BNode","page":"Physics & special functions","title":"VoronoiFVM.BNode","text":"mutable struct BNode{Tv, Ti} <: VoronoiFVM.AbstractNode{Tv, Ti}\n\nStructure holding local boundary  node information.\n\nindex::Any\nIndex in grid\n\nibface::Any\nBFace number it is called from\n\nibnode::Any\nlocal node number\n\nregion::Any\nBoundary region number\n\ncellregions::Vector\nnspec::Any\nNumber of species defined in node\n\ncoord::Matrix\nGrid coordinates\n\nbfacenodes::Matrix\nbfaceregions::Vector\nallcellregions::Vector\nbfacecells::Adjacency\nDirichlet::Any\ntime::Any\nSystem time\n\nembedparam::Any\nCurrent value of embedding parameter\n\ndirichlet_value::Vector\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Edge","page":"Physics & special functions","title":"VoronoiFVM.Edge","text":"mutable struct Edge{Tv, Ti} <: VoronoiFVM.AbstractEdge{Tv, Ti}\n\nStructure holding local edge information.\n\nindex::Any\nIndex in grid\n\nnode::Vector\nIndex\n\nregion::Any\nInner region number corresponding to edge\n\nnspec::Any\nNumber of species defined in edge\n\nicell::Any\nNumber of discretization cell the edge is invoked from\n\ncoord::Matrix\nGrid coordinates\n\ncellx::Matrix\nedgenodes::Matrix\ncellregions::Vector\nhas_celledges::Bool\ntime::Any\nSystem time\n\nembedparam::Any\nCurrent value of embedding parameter\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Node","page":"Physics & special functions","title":"VoronoiFVM.Node","text":"mutable struct Node{Tv, Ti} <: VoronoiFVM.AbstractNode{Tv, Ti}\n\nStructure holding local node information.\n\nindex::Any\nIndex in grid\n\nregion::Any\nInner region number\n\nnspec::Any\nNumber of species defined in node\n\nicell::Any\nNumber of discretization cell the node is invoked from\n\ncoord::Matrix\nGrid coordinates\n\ncellnodes::Matrix\nGrid cell nodes\n\ncellregions::Vector\nGrid cell regions\n\ntime::Any\nSystem time\n\nembedparam::Any\nCurrent value of embedding parameter\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.NodeRHS","page":"Physics & special functions","title":"VoronoiFVM.NodeRHS","text":"struct NodeRHS{T} <: VoronoiFVM.AbstractNodeData{T}\n\nRHS data on node. \n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.NodeUnknowns","page":"Physics & special functions","title":"VoronoiFVM.NodeUnknowns","text":"struct NodeUnknowns{T} <: VoronoiFVM.AbstractNodeData{T}\n\nUnknown data on node. \n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.VectorUnknowns","page":"Physics & special functions","title":"VoronoiFVM.VectorUnknowns","text":"struct VectorUnknowns{T} <: AbstractArray{T, 1}\n\nWrapper struct for viewing unknowns passed to callback functions\n\nval::Vector\nn::Int64\noffset::Int64\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.meas-Tuple{VoronoiFVM.AbstractEdge}","page":"Physics & special functions","title":"VoronoiFVM.meas","text":"meas(edge::VoronoiFVM.AbstractEdge) -> Any\n\n\nCalculate the length of an edge. \n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.num_species-Tuple{VoronoiFVM.AbstractEdge}","page":"Physics & special functions","title":"VoronoiFVM.num_species","text":"num_species(edge::VoronoiFVM.AbstractEdge) -> Any\n\n\nReturn number of species for edge\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.unknowns-Union{Tuple{T}, Tuple{VoronoiFVM.AbstractEdge, Vector{T}, Any}} where T","page":"Physics & special functions","title":"VoronoiFVM.unknowns","text":"unknowns(edge::VoronoiFVM.AbstractEdge, u::Array{T, 1}, i) -> VoronoiFVM.VectorUnknowns\n\n\nConstruct vector unknowns on edge.\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.viewK-Tuple{VoronoiFVM.AbstractEdge, Any}","page":"Physics & special functions","title":"VoronoiFVM.viewK","text":"viewK(edge::VoronoiFVM.AbstractEdge, u) -> VoronoiFVM.VectorUnknowns\n\n\nSolution view on first edge node\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.viewL-Tuple{VoronoiFVM.AbstractEdge, Any}","page":"Physics & special functions","title":"VoronoiFVM.viewL","text":"viewL(edge::VoronoiFVM.AbstractEdge, u) -> VoronoiFVM.VectorUnknowns\n\n\nSolution view on second edge node\n\n\n\n\n\n","category":"method"},{"location":"physics/#Special-functions","page":"Physics & special functions","title":"Special functions","text":"","category":"section"},{"location":"physics/","page":"Physics & special functions","title":"Physics & special functions","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_functions.jl\"]","category":"page"},{"location":"physics/#VoronoiFVM.fbernoulli-Tuple{Any}","page":"Physics & special functions","title":"VoronoiFVM.fbernoulli","text":"fbernoulli(x)\n\n\nBernoulli function B(x)=fracxe^x-1 for exponentially fitted upwinding.\n\nThe name fbernoulli has been chosen to avoid confusion with Bernoulli from JuliaStats/Distributions.jl\n\nReturns a real number containing the result.\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.fbernoulli_pm-Tuple{Any}","page":"Physics & special functions","title":"VoronoiFVM.fbernoulli_pm","text":"fbernoulli_pm(x)\n\n\nBernoulli function B(x)=fracxe^x-1 for exponentially fitted upwind, joint evaluation for positive and negative argument\n\nUsually, we need B(x) B(-x) togehter,  and it is cheaper to calculate them together.\n\nReturns two real numbers containing the result for argument x and argument -x.\n\nThe error in comparison with the evaluation of the original expression with BigFloat is less than 1.0e-15\n\n\n\n\n\n","category":"method"},{"location":"changes/#Changes","page":"Changes","title":"Changes","text":"","category":"section"},{"location":"changes/#v0.15.0-Jan-1,-2022","page":"Changes","title":"v0.15.0 Jan 1, 2022","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Breaking: History is not anymore returned by solve, instead it can be accessed via history after the solution.\nCleaned API:\nsolve(system::VoronoiFVM.AbstractSystem; kwargs...) is now the main method of solve which allows to  access stationary, transient, embedding and DifferentialEquations based solvers.\nJoint implementation for implicit Euler timestepping and parameter embedding\nHandle more kwargs via SolverControl (e.g. log)\nUse Parameters.jl in struct definition\nAdd history types NewtonSolverHistory, TransientSolverHistory\ndetailed and summary methods for both history types\nNonlinear solver example notebook (under development): nonlinear-solvers.jl","category":"page"},{"location":"changes/#v0.14.0-Dec-24,-2021","page":"Changes","title":"v0.14.0 Dec 24, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Backward compatible, hopefully nonbreaking API simplification","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"Boundary conditions are now specified in breaction. Advantages:\neasy x/t dependency\nunified (upcoming) interface for parameters\nunified handling of standard and nonstandard boundary conditions\nsimpler documentation\nMade NewtonControl alias of SolverControl, continue to work with SolverControl\nSystem constructor now directly takes physics callback functions, no need anymore to work with extra physics struct\nsolve() now takes \"SolverControl\" parameters as kwargs,no need anymore to work with extra NewtonControl/SolverControl struct\nNotebooks as part of documentation and CI\nSee also the pluto notebook api-update.jl","category":"page"},{"location":"changes/#v0.13.2-Oct-29,-2021","page":"Changes","title":"v0.13.2 Oct 29, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Bernoulli function overhaul","category":"page"},{"location":"changes/#v0.13.1","page":"Changes","title":"v0.13.1","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"sorted things with ExtendableGrids\nnodal flux reconstruction (e.g. for visualization)","category":"page"},{"location":"changes/#v0.13.0,-Oct-13,-2021","page":"Changes","title":"v0.13.0, Oct 13, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"various bug fixes, explicit numbering of edge nodes","category":"page"},{"location":"changes/#v0.12.3,-July-7,-2021","page":"Changes","title":"v0.12.3, July 7, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Add quantity id\nDocument quantities","category":"page"},{"location":"changes/#v0.12.2,-July-7,-2021","page":"Changes","title":"v0.12.2, July 7, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Introduce the notion of quantities which can be continuous or discontinuous at interfaces.","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"Quantity handling is implemented on top of species handling\nUnknowns u and rhs y now passed to callbacks as wrapper types,  and can be indexed by quantity or by species numbers.  Moreover, this will allow to abstract parameters, gradients etc. in future versions.","category":"page"},{"location":"changes/#v0.12.0,-July-2-2021","page":"Changes","title":"v0.12.0, July 2 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"By default, the u parameter in flux callbacks is now a  nspec x 2 array\nunknowns(edge,u), viewK, viewL are obsolete, they still work for backward compatibility\nphysics.num_species is now meaningless, num_species is automatically detected.\nSparseSystem and DenseSystem are now type aliases of a parametrized type instead of two  independent subtypes of System","category":"page"},{"location":"changes/#v0.11.8","page":"Changes","title":"v0.11.8","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"increase chunk size threshold to match argument length in calls to vectormodejacobian","category":"page"},{"location":"changes/#v0.11.7","page":"Changes","title":"v0.11.7","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"First attempts on surface flux","category":"page"},{"location":"changes/#v0.11.1,-April-13,-2021","page":"Changes","title":"v0.11.1, April 13, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Assembly loops cleaned from type instabilities\nOptionally check for allocations due to type instabilities introduced in physics callbacks. See check_allocs! for more information.","category":"page"},{"location":"changes/#v0.11,-April-12,-2021","page":"Changes","title":"v0.11, April 12, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Depending on Julia 1.5 now\nLineaer solvers now based on factorize! from ExtendableSparse 0.5\nDocumentation overhaul\nRe-checking impedance calculation","category":"page"},{"location":"changes/#v0.10.13-April-1,-2021","page":"Changes","title":"v0.10.13 April 1, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Outflow boundary conditions","category":"page"},{"location":"changes/#v0.10.8-March-22,-2021","page":"Changes","title":"v0.10.8 March 22, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"TransientSolution structure, transient solve\nSolve compatible with DifferentialEquations.jl","category":"page"},{"location":"changes/#v0.10.3-Feb-11,-2021","page":"Changes","title":"v0.10.3 Feb 11, 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Introduce non-mutating solve\nOptionally record history if log kw is true in solve.","category":"page"},{"location":"changes/#v0.10.0-Jan-9-2021","page":"Changes","title":"v0.10.0 Jan 9 2021","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Moving visualization to the package GridVisualize.jl, emerging from  the visualization methods in ExtendableGrids","category":"page"},{"location":"changes/#v0.9.0-Dec-21-2020","page":"Changes","title":"v0.9.0 Dec 21 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Add the possibility to interface with DifferentialEquations.jl\nBreaking: The API change to passing the unknowns to the an edge callback as a matrix turned out to be a dead end in the strategic sense. In order to extend functionality, we need to be able to pass more data to  which we can apply differetiation. Particular plans involve bifurcation parameters and reconstructed gradients. So we return to the viewK/viewL pattern we had before. However,  these are now aliases:\nviewK(edge,u)=unknowns(edge,u,1)\nviewL(edge,u)=unknowns(edge,u,2)\nIn order to ease refactoring in the case where models have been implemented with Matrix access to the unknowns, unknowns(edge,u) returns a matrix of the edge unknowns.    For refactoring, just rewrite e.g.","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"    function flux(y,u,edge)\n        for ispec=1:nspec\n            y[ispec]=u[ispec,1]-u[ispec,2]\n        end\n    end","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"to","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"    function flux(y,u0,edge)\n        u=unknowns(edge,u0)\n        for ispec=1:nspec\n            y[ispec]=u[ispec,1]-u[ispec,2]\n        end\n    end","category":"page"},{"location":"changes/#v0.8.5-Sep-1-2020","page":"Changes","title":"v0.8.5 Sep 1 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"allow any object in Physics.data  (thanks Jan Weidner)\nadd generic operator for non-canonical problem structures","category":"page"},{"location":"changes/#v0.8.4-July-25-2020","page":"Changes","title":"v0.8.4 July 25 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Update ExtendableGrids + ExtendableSparse","category":"page"},{"location":"changes/#v0.8.3-June-25-2020","page":"Changes","title":"v0.8.3 June 25 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Replace splatting by dispatch on availability of data record","category":"page"},{"location":"changes/#v0.8.2-May-15-2020","page":"Changes","title":"v0.8.2 May 15 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Form factors are now pre-calculated and stored\nIntroduced update_grid! for triggering re-calculation if coordinates have changed","category":"page"},{"location":"changes/#v0.8.1-May-2-2020","page":"Changes","title":"v0.8.1 May 2 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Introduce evolve! : time solver with automatic timestep control","category":"page"},{"location":"changes/#v0.8-Apr-28,-2020","page":"Changes","title":"v0.8 Apr 28, 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Replaced VoronoiFVM grid module by  ExtendableGrids.jl\nMoved grid generation, modification, plotting  over to ExtendableGrids\nNecessary changes in codes using VoronoiFVM:\nReplace grid.coord by coord obtained via coord=coordinates(grid) or  coord=grid[Coordinates] after importing ExtendableGrids\nReplace VoronoiFVM.plot by ExtendableGrids.plot.\nIn the plot method, Plotter is now a keyword argument\nVoronoiFVM.Grid() now returns a ExtendableGrids.ExtendableGrid,  in fact it is just an alias to ExtendableGrids.simplexgrid\nFor using any methods on grids like cellmask! one nees to use ExtendableGrids\nSubgrids now are of the same type ExtendableGrids,  views are currently defined for vectors only.","category":"page"},{"location":"changes/#v0.7-Feb-28-2020","page":"Changes","title":"v0.7 Feb 28 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"API modification:\nBreaking:\ndata parameter passed to physics callbacks only if Physics object is created with data parameter.\nThis makes the API more consistent in the case that parameters are just taken from the closure (the scope where the physics functions are defined) and no data object has been created.\nReplace node.coord[i] by  node[i].\nReplace edge.coordK[i] by  edge[i,1].\nReplace edge.coordL[i] by  edge[i,2].\nThis now directly accesses the coordinate field of the grid and avoids copying of the coordinates\nBackward compatible:  \nNo need for viewK and viewL in edge callbacks (they also make trouble with allocations...)\nReplace uk[i] by u[i,1]\nReplace ul[i] by u[i,2]\nReplace VoronoiFVM.DenseSystem(...)  by VoronoiFVM.System(..., unknown_storage=:dense)\nReplace VoronoiFVM.SparseSystem(...) by VoronoiFVM.System(..., unknown_storage=:sparse)\nNo allocations anymore in assembly loop:\nReplaced ElasticArray in Grid by normal one - this was the largest regression\nReturn nothing from mutating methods to avoid some allocations \nIndexing in formfactors.jl with Int","category":"page"},{"location":"changes/#v0.6.5-Jan-25-2020","page":"Changes","title":"v0.6.5 Jan 25 2020","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"use updateindex! for matrix, depend on ExtendableSparse 0.2.6","category":"page"},{"location":"changes/#v0.6.4-2020-01-20","page":"Changes","title":"v0.6.4 2020-01-20","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Rearranged + commented boundary assembly loop\nReworked + renamed some examples\nDocument that unknowns doesn't initialize values.","category":"page"},{"location":"changes/#v0.6.3-2019-12-21","page":"Changes","title":"v0.6.3 2019-12-21","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"remove xcolptrs call Update dependency on ExtendableSparse","category":"page"},{"location":"changes/#v0.6.2-2019-12-20","page":"Changes","title":"v0.6.2 2019-12-20","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Updated dependency list (Triangulate ^0.4.0)","category":"page"},{"location":"changes/#v0.6.1,-2019-12-17","page":"Changes","title":"v0.6.1, 2019-12-17","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"return \"plotted\" for being able to  place colormap\nrequire Triangulate >= 0.3.0","category":"page"},{"location":"changes/#v0.6.0,-Dec-15-2019","page":"Changes","title":"v0.6.0, Dec 15 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Removed Triangle submodule, depend on new Triangulate.jl Triangle wrapper\nlink to source code in examples\nboundary_dirichlet! etc methods for setting boundary conditions","category":"page"},{"location":"changes/#v0.5.6-Dec-5-2019","page":"Changes","title":"v0.5.6 Dec 5 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Bug fixes\ncheck triangle input for min 3 points\ncheck triangle edgelist for C_NULL\nvoronoi plot","category":"page"},{"location":"changes/#v0.5.5-Dec-4-2019","page":"Changes","title":"v0.5.5 Dec 4 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"(Temporary) Copy of TriangleRaw as Triangle submodule. To be replaced by dependency on evisioned package","category":"page"},{"location":"changes/#v0.5.4-Dec-3-2019","page":"Changes","title":"v0.5.4 Dec 3 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Re-enabled ElasticArrays in grid structure (for the time being)\nAdded potkink example: this adds an inner boudary","category":"page"},{"location":"changes/#v0.5.3-Dec-1-2019","page":"Changes","title":"v0.5.3 Dec 1 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"triangle in optional submodule\nModified API for plotting\nRemoved formal dependency on Plots and PyPlot\nUse Plotter module as first parameter to plot methods  - replaces fvmplot and fvmpyplot functions. Use VoronoiFVM.plot(PyPlot,...) resp.  VoronoiFVM.plot(Plots,...)\nNo more complaints when package is used in environment with plots or pyplot installed\nModified API for impedance","category":"page"},{"location":"changes/#v0.5.2-Nov-19,-2019","page":"Changes","title":"v0.5.2 Nov 19, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Reorganized grid stuff\nIncluded triangle (after Ideas from TriangleMesh.jl)","category":"page"},{"location":"changes/#v0.5.1-Nov-13,-2019","page":"Changes","title":"v0.5.1 Nov 13, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Fixed performance regression: AbstractArrays for Grid components were slow.\nAdded handling of cylindrical coordinates","category":"page"},{"location":"changes/#V0.5,-November-10,-2019","page":"Changes","title":"V0.5, November 10, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Velocity projections\nAdded edge handling to grid struct","category":"page"},{"location":"changes/#V0.4.2,-November-6,-2019","page":"Changes","title":"V0.4.2, November 6, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Replaced PyPlot by Plots\nBetter and more examples","category":"page"},{"location":"changes/#V0.4,-July-12,-2019","page":"Changes","title":"V0.4, July 12, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Registered with Julia ecosystem\nEnhance Newton solver by embedding, exception handling\nReplace SparseMatrixCSC with ExtendableSparseMatrix\nfixed allocation issues in assembly\nassured that users get allocation stuff right via typed functions in physics structure\nmore julianic API","category":"page"},{"location":"changes/#V0.3,-April-9-2019","page":"Changes","title":"V0.3, April 9 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Renamed from TwoPointFluxFVM to  VoronoiFVM\nComplete rewrite of assembly allowing sparse or dense matrix  to store degree of freedom information\nSolution is a nnodes x nspecies sparse or dense matrix\nThe wonderful array interface of Julia still provides slicing etc in oder to access  species without need to write any bulk_solution stuff or whatever when using the sparse variant\nRe-export value() for debugging in physics functions\nTest function handling for flux calculation\nFirst working steps to impedance handling\nAbolished Graph in favor of  Grid, Graph was premature optimization...","category":"page"},{"location":"changes/#V0.2,-Feb-20,-2019","page":"Changes","title":"V0.2, Feb 20, 2019","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Changed signature of all callback functions: This also allows to pass user defined arrays etc. to the callback functions. In particular, velocity vectors can be passed this way.\nBesides of flux!(), they now all have node::VoronoiFVM.Node as a second argument.\nflux!() has edge::VoronoiFVM.Edge as a second argument\nthe x argument in source!() is omitted, the same data  are now found in node.coord","category":"page"},{"location":"changes/","page":"Changes","title":"Changes","text":"New method edgelength(edge::VoronoiFVM.Edge)","category":"page"},{"location":"changes/#V0.1,-Dec.-2018","page":"Changes","title":"V0.1, Dec. 2018","text":"","category":"section"},{"location":"changes/","page":"Changes","title":"Changes","text":"Initial release","category":"page"},{"location":"method/#The-Voronoi-finite-volume-method","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"","category":"section"},{"location":"method/#Construction-of-control-volumes","page":"The Voronoi finite volume method","title":"Construction of control volumes","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Start with a boundary conforming Delaunay triangulation of a polygonal domain (intervals in 1D, triangles in 2D, tetrahedra in   3D). Such a triangulation can be generated by e.g. by the mesh generators triangle and TetGen. These are available in Julia via Triangulate.jl and TetGen.jl. For simple geometries – tensor products of lower dimensional grids – such triangulation can be created more easily. The package ExtendableGrids.jl manages the grid data structure which is used in this package. SimplexGridFactory.jl interfaces this grid structure with  Triangulate.jl and TetGen.jl and provides an API for incrementally setting up geometry descriptions.\nJoin triangle circumcenters by lines rightarrow create Voronoi cells which can serve as control volumes, akin to representative elementary volumes (REV) used to derive conservation laws. ","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"<center>\n<img src=\"../trivoro.png\" width=\"50%\">\n</center>","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Black + green: triangle nodes\nGray: triangle edges\nBlue: triangle circumcenters\nRed: Boundaries of Voronoi cells","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"In order to make this construction possible, the triangulation must have the boundary conforming Delaunay property: ","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The interior of any triangle circumcircle does not contain any other node of the triangulation\nAll circumcircle centers lay within the domain ","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"In 2D, an equivalent condition is:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The sum of triangle angles opposite to a given interior edge is less than pi\nTriangle angles opposite to boundary edges are less than fracpi2.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"As a consequence, there is a 1:1 incidence between triangulation nodes and Voronoi cells. Moreover, the angle between the interface between two neigboring  Voronoi cells and the edge between their corresponding nodes is fracpi2.  Therefore the edge direction is aligned with the normal direction with respect to the boundary of the Voronoi cell. This makes it easy to use these Voronoi cells as REVs aka control volumes aka finite volume cells and to derive a space discretization for a concervation law  based on very same balance rules used to derive this conservation law.","category":"page"},{"location":"method/#The-discretization-approach","page":"The Voronoi finite volume method","title":"The discretization approach","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"<center>\n<img src=\"../vor.png\" width=\"50%\">\n</center>","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Given a continuity equation nablacdot vec j=f in a domain Omega, integrate it over a contol volume omega_k with associated node vec x_k and apply Gauss theorem:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"beginaligned\n0=int_omega_k (nablacdot  vec j -f ) domega\n=int_partialomega_k vec jcdot vec n ds  - int_omega_k f domega\n=sum_lin N_k int_omega_kcap omega_l vec jcdot vec n ds + int_partialomega_kcap partialOmega vec jcdot vec n ds   - int_omega_k f domega \napprox sum_lin N_k fracsigma_klh_klg(u_k u_l) -  omega_k f_k + textboundary terms\nendaligned","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Here, N_k is the set of neighbor control volumes, sigma_kl=omega_kcap omega_l, h_kl=vec x_k -vec x_l, where  cdot denotes the measure (length resp. area) of a geometrical entity. In the approximation step, we replaced the normal flux integral over the interface between two control volumes by the measure of this interface multiplied by a function depending on the unknowns u_k u_l associated to the respective nodes divided by the distance between these nodes.  The flux function g can be derived from usual finite difference formulas discretizing a particular flux law.","category":"page"},{"location":"method/#Flux-laws","page":"The Voronoi finite volume method","title":"Flux laws","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"For instance, for the diffusion flux vec j=-Dvecnabla u, we use g(u_k u_l)=D(u_k -u_l).","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"For a convective diffusion flux vec j = -Dvec nabla u + u vec v, one can chose the upwind flux","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"beginaligned\ng(u_k u_l)=D(u_k -u_l) + \nv_klbegincases\nu_k v_kl0\nu_l v_klleq 0\nendcases\nendaligned","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"where v_kl=frach_klsigma_klint_omega_kcap omega_l vec v cdot vec n_kl  ds Fluxes also can depend nonlinearily on u.","category":"page"},{"location":"method/#Boundary-conditions","page":"The Voronoi finite volume method","title":"Boundary conditions","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"To implement a  Robin boundary condition on Gamma=partialOmega ","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"- vec j cdot vec n + a u = b","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"we note that by the very construction, the discretization nodes associated to control volumes adjacent to the domain boundary are located at the domain boundary, thus we can assume that the boundary condition is valid in the corresponding collocation node u_k. We assume that partialomega_kcap partial_Omega= cup_minmathcal M_k gamma_km is the union of a finite number of line (plane) segments. For interior nodes, we set mathcal M_k = emptyset . Thus, for the boundary terms in the above equation, we have","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"beginaligned\ntextboundary terms=sum_minmathcal M_k int_gamma_km vec j cdot vec n d s\n                     approx sum_minmathcal M_k gamma_km vec j cdot vec n\n                     approxsum_minmathcal M_k gamma_km  (au_k -b)\nendaligned","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"We observe that for varepsilonto 0, the Robin boundary condition ","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"- vec j cdot vec n + frac1varepsilonu = frac1varepsilong","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"tends to the Dirichlet bundary condition ","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"    u=g","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Therefore, a Dirichlet boundary condition can be approximated by choosing a small value of varepsilon and implying the aforementioned Robin boundary conditions. This approach  called penalty method  is chosen for the implementation of Dirichlet boundary conditions in this package.","category":"page"},{"location":"method/#Time-dependent-problems,-reaction-terms","page":"The Voronoi finite volume method","title":"Time dependent problems, reaction terms","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This approach easily generalizes to time dependent nonlinear transport-reaction problems with storage terms s(u), reaction terms r(u) and source terms f:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"partial_t s(u) + nabla cdot vec j + r(u) -f =0","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Semidiscretization in time (for implicit Euler) leads to ","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"fracs(u)-s(u^flat)tau + nabla cdot vec j + r(u) -f =0","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"where tau is the time step size and u^flat is the solution from the old timestep. The approximation  approach then for each control volume gives","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"omega_kfracs(u_k)-s(u_k^flat)tau + sum_lin N_k fracsigma_klh_klg(u_k u_l)+ sum_minmathcal M_k gamma_km  (au_k -b) + omega_k (r(u_k)- f_k)=0","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"If n is the number of discretization nodes, we get a system of n equations with n unknowns which under proper conditions on rgs has a unique solution. ","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The implicit Euler method is the default solver for time dependent problems. Alternatively, ODE and DAE solvers from DifferentialEquations.jl can be used.","category":"page"},{"location":"method/#Generalizations-to-systems","page":"The Voronoi finite volume method","title":"Generalizations to systems","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This approach generalizes to systems of partial differential equations, which formally can be written in the same way, but assuming that u is a vector function of vec xt, and rgs are vector functions of their arguments. The package allows to handle different sets of species in different subdomains of Omega.","category":"page"},{"location":"method/#Boundary-reactions,-boundary-species","page":"The Voronoi finite volume method","title":"Boundary reactions, boundary species","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"In addition to  rgs, the package allows to specify additional boundary species, boundary reaction terms and bondary storage terms.","category":"page"},{"location":"method/#Why-this-method-?","page":"The Voronoi finite volume method","title":"Why this method ?","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Independent of space dimension, the method (with properly chosen flux functions) is able to preserve a number of physical quantities if they are present on the continuous level:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"local and global mass conservation\npositivity of solutions\nmaximum principle: in the absence of source and reaction terms, local extrema of the stationary solution are located at the domain boudaries, never in the interior. For transient problems, local extrema in the interior can only come from the initial value. \nConsistency to thermodynamics: entropy production etc.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Many of these properties are hard to prove for finite element methods, in particular for the convection-diffusion case.","category":"page"},{"location":"method/#Where-is-this-method-not-appropriate-?","page":"The Voronoi finite volume method","title":"Where is this method not appropriate ?","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"There are a number of cases where this method needs to be replaced by something else or at least to be applied with great care:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Anisotropic diffusion only works with proper mesh alignment \nStrongly varying capacity (in the function s) at domain interfaces lead to inexact breaktrough curves\nSharp moving convection fronts are smeared out too strongly","category":"page"},{"location":"method/#History-and-literature","page":"The Voronoi finite volume method","title":"History and literature","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The following list  is work in progress and incomplete, but it references some sources behind the ideas in this package.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Macneal, R. H. (1953). An asymmetrical finite difference network. Quarterly of Applied Mathematics, 11(3), 295-310.  (pdf via JSTOR). Perhaps this is the earliest mentioning of the method. Note that it  was used on an electrical analog computer. \nGärtner, K., & Kamenski, L. (2019). Why do we need Voronoi cells and Delaunay meshes? arXiv preprint arXiv:1905.01738. A recent overview on the merits of the method. One of the authors belongs to the pioneers of its application in 3D.\nFuhrmann, J., & Langmach, H. (2001). Stability and existence of solutions of time-implicit finite volume schemes for viscous nonlinear conservation laws. Applied Numerical Mathematics, 37(1-2), 201-230. A discussion of the method applied to rather general nonlinear scalar problems.\nSi, H., Gärtner, K., & Fuhrmann, J. (2010). Boundary conforming Delaunay mesh generation. Computational Mathematics and Mathematical Physics, 50(1), 38-53. Definition of the boundary conforming Delaunay property. \nEymard, R., Fuhrmann, J., & Gärtner, K. (2006). A finite volume scheme for nonlinear parabolic equations derived from one-dimensional local Dirichlet problems. Numerische Mathematik, 102(3), 463-495. General concept of the derivation of upwind fluxes for nonlinear problems.\nFarrell, P., Rotundo, N., Doan, D. H., Kantner, M., Fuhrmann, J., & Koprucki, T. (2017). Drift-diffusion models. In Handbook of Optoelectronic Device Modeling and Simulation (pp. 733-772). CRC Press. Overview and introduction to the method applied to semiconductor device simulation. This problem class profits most from the desirable properties of the method.","category":"page"},{"location":"method/#Software-API-and-implementation","page":"The Voronoi finite volume method","title":"Software API and implementation","text":"","category":"section"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The entities describing the discrete system can be subdivided into two categories:","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Geometrical data: omega_k gamma_k sigma_kl h_kl together with the connectivity information simplex grid. These data are calculated  from the discretization grid.\nVoronoiFVM.Physics: the number of species and the functions sgrf etc. describing the particular problem.","category":"page"},{"location":"method/","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The solution of the nonlinear systems of equations is performed by Newton's method combined with various direct and iterative linear solvers. The Jacobi matrices used in Newton's method are assembled from the constitutive functions whith the help of forward mode automatic differentiation implemented in  ForwardDiff.jl.","category":"page"},{"location":"runexamples/#About-the-examples","page":"About the examples","title":"About the examples","text":"","category":"section"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"The examples have been designed with the following issues in mind:","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"they run from the Julia REPL\neach example is a Julia module named similar to the basename of the example file.\nan example can be used as the starting point for a project \nthe examples at the same time comprise the test suite for VoronoiFVM.","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"Since the creation of these examples, the API has been updated and simplified.","category":"page"},{"location":"runexamples/#Running-the-examples","page":"About the examples","title":"Running the examples","text":"","category":"section"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"Plotting is performed using the GridVisualize.jl package which interfaces PyPlot.jl, Plots.jl, Makie.jl.","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"In order to run ExampleXXX, peform the following steps:","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"Download the example file (e.g. via the source code link at the top)\nCall Julia with  an Julia environment which contains VoronoiFVM.jl, ExtendableGrids.jl, GridVisualize.jl  and e.g. PyPlot.jl\ninclude(\"ExampleXXX.jl\")\nRun the example via ExampleXXX.main(Plotter=PyPlot)","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"Due to the encapsulation into modules, you can load as many examples as you like.","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"If you want to modifiy the example, consider using Revise.jl and includet. ","category":"page"},{"location":"runexamples/#Performance-with-closures","page":"About the examples","title":"Performance with  closures","text":"","category":"section"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"VoronoiFVM provides two flavors of calbacks for constitutive functions: ","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"Callbacks with data parameoter. data is declared as part of Physics and passed down to the callbacks\nCallbacks without data parameter. Here, the parameters of the  physics callbacks are accessed via closures, i.e. from within the  scope of the definition of the particular function.","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"While the  second method is  very convenient to  use, it comes  with a serious performance pitfall: if a  variable in the closure is assigned twice, Julia becomes unsure about  it's type and therefore \"boxes\" it, i.e. it  creates a wrapper struct  around the variable value  which is able to track  its potentially changing type.  The serious consequence of this is that assignments to a boxed variable lead to allocations, which are a serious performance hit if they occur in loops over grid nodes or edges.","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"This behaviour is explained in the Julia documentation.","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"Here is an example which comes close to the situation in VoronoiFVM:","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"function ttype_boxed(n)\n    u=rand(n)\n    v=similar(u)\n    a=2.0\n    a=3.0\n    dostuff(u)=a*u\n    @allocated map!(dostuff,v,u)\nend\nttype_boxed(10) # hide\nttype_boxed(10)","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"The remedy is to type-annotate variables from closures:","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"function ttype_annotated(n)\n    u=rand(n)\n    v=similar(u)\n    a::Float64=2.0\n    a=3.0\n    dostuff(u)=a*u\n    @allocated map!(dostuff,v,u)\nend\nttype_annotated(10) # hide\nttype_annotated(10)","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"VoronoiFVM provides a mechanism to check for this situation with the check_allocs! method. After creating a system, set","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"check_allocs!(system,true)","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"and allocations inner assembly loops will throw an error.","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"To set this behavior as default for all systems you create, invoke ","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"ENV[\"VORONOIFVM_CHECK_ALLOCS\"]=\"true\"","category":"page"},{"location":"runexamples/","page":"About the examples","title":"About the examples","text":"before using VoronoiFVM, e.g. put it  into your startup.jl","category":"page"},{"location":"grid/#Grid","page":"Grid","title":"Grid","text":"","category":"section"},{"location":"grid/#Types-and-Constants","page":"Grid","title":"Types and Constants","text":"","category":"section"},{"location":"grid/","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [ \n  \"grid/file.jl\",\n  \"grid/grid_interface.jl\",\n  \"grid/grid.jl\",\n  \"grid/regionedit.jl\",\n  \"grid/subgrid.jl\",\n  \"grid/tensor.jl\",\n  \"grid/generate.jl\",\n  \"grid/tokenstream.jl\",\n]\nOrder = [:type]","category":"page"},{"location":"grid/","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [ \n  \"grid/file.jl\",\n  \"grid/grid_interface.jl\",\n  \"grid/grid.jl\",\n  \"grid/regionedit.jl\",\n  \"grid/subgrid.jl\",\n  \"grid/tensor.jl\",\n  \"grid/generate.jl\",\n  \"grid/tokenstream.jl\",\n]\nOrder = [:constant]","category":"page"},{"location":"grid/#Methods","page":"Grid","title":"Methods","text":"","category":"section"},{"location":"grid/","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [ \n  \"grid/file.jl\",\n  \"grid/grid_interface.jl\",\n  \"grid/grid.jl\",\n  \"grid/regionedit.jl\",\n  \"grid/subgrid.jl\",\n  \"grid/tensor.jl\",\n  \"grid/generate.jl\",\n  \"grid/tokenstream.jl\",\n]\nOrder = [:function]","category":"page"},{"location":"post/#Postprocessing","page":"Postprocessing","title":"Postprocessing","text":"","category":"section"},{"location":"post/#Plotting","page":"Postprocessing","title":"Plotting","text":"","category":"section"},{"location":"post/","page":"Postprocessing","title":"Postprocessing","text":"Plotting can be performed using the package GridVisualize.jl.","category":"page"},{"location":"post/#Solution-integrals","page":"Postprocessing","title":"Solution integrals","text":"","category":"section"},{"location":"post/","page":"Postprocessing","title":"Postprocessing","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_intergrals.jl\"]","category":"page"},{"location":"post/#Boundary-flux-calculation","page":"Postprocessing","title":"Boundary flux calculation","text":"","category":"section"},{"location":"post/","page":"Postprocessing","title":"Postprocessing","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_testfunctions.jl\"]","category":"page"},{"location":"post/#VoronoiFVM.TestFunctionFactory","page":"Postprocessing","title":"VoronoiFVM.TestFunctionFactory","text":"mutable struct TestFunctionFactory{Tv}\n\nData structure containing DenseSystem used to calculate test functions for boundary flux calculations.\n\nsystem::VoronoiFVM.AbstractSystem{Tv} where Tv\nOriginal system\n\ntfsystem::VoronoiFVM.System{Tv, Ti, Tm, Matrix{Ti}, Matrix{Tv}} where {Tv, Ti, Tm}\nTest function system\n\n\n\n\n\n","category":"type"},{"location":"post/#VoronoiFVM.TestFunctionFactory-Union{Tuple{VoronoiFVM.AbstractSystem{Tv}}, Tuple{Tv}} where Tv","page":"Postprocessing","title":"VoronoiFVM.TestFunctionFactory","text":"Constructor for TestFunctionFactory from System\n\n\n\n\n\n","category":"method"},{"location":"post/#VoronoiFVM.integrate-Union{Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti}, Vector{Tv}, AbstractMatrix{Tv}, AbstractMatrix{Tv}, Real}} where {Tv, Ti}","page":"Postprocessing","title":"VoronoiFVM.integrate","text":"integrate(system, tf, U, Uold, tstep)\n\n\nCalculate test function integral for transient solution.\n\n\n\n\n\n","category":"method"},{"location":"post/#VoronoiFVM.integrate-Union{Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti}, Vector{Tv}, AbstractMatrix{Tv}}} where {Tv, Ti}","page":"Postprocessing","title":"VoronoiFVM.integrate","text":"integrate(system, tf, U)\n\n\nCalculate test function integral for steady state solution.\n\n\n\n\n\n","category":"method"},{"location":"post/#VoronoiFVM.integrate_stdy-Union{Tuple{Ti}, Tuple{Tv}, Tuple{Tu}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti}, Vector{Tv}, AbstractMatrix{Tu}}} where {Tu, Tv, Ti}","page":"Postprocessing","title":"VoronoiFVM.integrate_stdy","text":"integrate_stdy(system, tf, U)\n\n\nSteady state part of test function integral.\n\n\n\n\n\n","category":"method"},{"location":"post/#VoronoiFVM.integrate_tran-Union{Tuple{Ti}, Tuple{Tv}, Tuple{Tu}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti}, Vector{Tv}, AbstractMatrix{Tu}}} where {Tu, Tv, Ti}","page":"Postprocessing","title":"VoronoiFVM.integrate_tran","text":"Calculate transient part of test function integral.\n\n\n\n\n\n","category":"method"},{"location":"post/#VoronoiFVM.testfunction-Union{Tuple{Tv}, Tuple{VoronoiFVM.TestFunctionFactory{Tv}, Any, Any}} where Tv","page":"Postprocessing","title":"VoronoiFVM.testfunction","text":"testfunction(factory::VoronoiFVM.TestFunctionFactory{Tv}, bc0, bc1) -> Any\n\n\nCreate testfunction which has Dirichlet zero boundary conditions  for boundary regions in bc0 and Dirichlet one boundary conditions  for boundary regions in bc1.\n\n\n\n\n\n","category":"method"},{"location":"post/#Impedance-calculatiom","page":"Postprocessing","title":"Impedance calculatiom","text":"","category":"section"},{"location":"post/","page":"Postprocessing","title":"Postprocessing","text":"Impedance calculation can be seen as a postprocessing step after the solution of the unexcited stationary system.","category":"page"},{"location":"post/","page":"Postprocessing","title":"Postprocessing","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_impedance.jl\"]","category":"page"},{"location":"post/#VoronoiFVM.AbstractImpedanceSystem","page":"Postprocessing","title":"VoronoiFVM.AbstractImpedanceSystem","text":"abstract type AbstractImpedanceSystem{Tv<:Number}\n\nAbstract type for impedance system.\n\n\n\n\n\n","category":"type"},{"location":"post/#VoronoiFVM.ImpedanceSystem","page":"Postprocessing","title":"VoronoiFVM.ImpedanceSystem","text":"mutable struct ImpedanceSystem{Tv} <: VoronoiFVM.AbstractImpedanceSystem{Tv}\n\nConcrete type for impedance system.\n\nsysnzval::AbstractArray{Complex{Tv}, 1} where Tv\nNonzero pattern of time domain system matrix\n\ngrid::Any\nDiscretization grid\n\nstorderiv::AbstractMatrix\nDerivative of storage term\n\nmatrix::AbstractArray{Complex{Tv}, 2} where Tv\nComplex matrix of impedance system\n\nF::AbstractArray{Complex{Tv}, 2} where Tv\nRight hand side of impedance system\n\nU0::AbstractMatrix\nStationary state\n\n\n\n\n\n","category":"type"},{"location":"post/#VoronoiFVM.ImpedanceSystem-Union{Tuple{Ti}, Tuple{Tv}, Tuple{VoronoiFVM.AbstractSystem{Tv, Ti}, AbstractMatrix, Any, Any}} where {Tv, Ti}","page":"Postprocessing","title":"VoronoiFVM.ImpedanceSystem","text":"ImpedanceSystem(system, U0, excited_spec, excited_bc)\n\n\nConstruct impedance system from time domain system sys and steady state solution U0 under the assumption of a periodic perturbation of species excited_spec at  boundary excited_bc.\n\n\n\n\n\n","category":"method"},{"location":"post/#VoronoiFVM.impedance-Tuple{VoronoiFVM.ImpedanceSystem, Any, Any, Any, Any}","page":"Postprocessing","title":"VoronoiFVM.impedance","text":"impedance(impedance_system,ω, U0 ,\n          excited_spec, excited_bc, excited_bcval,\n           dmeas_stdy,\n           dmeas_tran \n           )\n    \n\nCalculate impedance.\n\nω:  frequency \nU0: steady state slution\ndmeas_stdy: Derivative of steady state part of measurement functional\ndmeas_tran  Derivative of transient part of the measurement functional\n\n\n\n\n\n","category":"method"},{"location":"post/#VoronoiFVM.measurement_derivative-Tuple{VoronoiFVM.AbstractSystem, Any, Any}","page":"Postprocessing","title":"VoronoiFVM.measurement_derivative","text":"measurement_derivative(system, measurement_functional, U0)\n\n\nCalculate the derivative of the scalar measurement functional at steady state U0\n\nUsually, this functional is  a test function integral.  Initially, we assume that its value depends on all unknowns of the system.\n\n\n\n\n\n","category":"method"},{"location":"post/#VoronoiFVM.solve!-Union{Tuple{Tv}, Tuple{AbstractArray{Complex{Tv}, 2}, VoronoiFVM.ImpedanceSystem{Tv}, Any}} where Tv","page":"Postprocessing","title":"VoronoiFVM.solve!","text":"solve!(UZ, impedance_system, ω)\n\n\nSolve the impedance system for given frequency ω.\n\n\n\n\n\n","category":"method"},{"location":"post/#VoronoiFVM.unknowns-Union{Tuple{VoronoiFVM.ImpedanceSystem{Tv}}, Tuple{Tv}} where Tv","page":"Postprocessing","title":"VoronoiFVM.unknowns","text":"Create a vector of unknowns of the impedance system\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"}]
}
